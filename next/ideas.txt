
######
IDEAS
######

Bar graphs. Bar charts. Bar plots.

Stacked bar plots and grouped bar plots.

Lollipop charts.

conceptdraw.com, tableau.com, looker.com, plot.ly

Reusing the layout constraint solver for other charts.

Bars._set_position() should comply with 'min_ax_width' (conf.py).

Documentation with sphinx
.. plot and :context

Matplotlib colormap. Handling the case of the numerical colors
attribute. SEE ALSO colorbar().

Using the ax area as a figure to allow subplots.

Allowing data pivoting.

Using NumPy in models.

'right_labels' used instead of 'labels' allow to save space.

Applying machine learning on labels formatting.
SEE ALSO textwrap.shorten()

Drawing colorful rectangles at specific locations 
on the figure to test the layout system.

Avoiding unnecessary data copying. Slicing lists only once ?

"Note that you do not need to have TeX installed, since Matplotlib
ships its own TeX expression parser, layout engine, and fonts."
One can use \mathrm{Roman}.


The Singleton design and __new__()

Ordering bars and providing good annotation.

Laying out bars evenly.

No more than 7 colors.

Setting the origin to start at zero.

Comparing set_xbound() with set_xlim().

Text artists have a fixed size, independent of the other artists.
Text artists never adapt by default in contrast with the other
artists.
Adapting the figure height to the desired number of bars in function
of the font size.


Sort technique
--------------
sorted_indices = np.argsort(an_array)
another_array[sorted_indices]


CODE
------

legend.get_tightbbox
legend.borderpad : 0.4 (in fontsize percents...)
ax.margins()
axes.xmargin : .05
if ax.get_xscale() == 'log':

Matplotlib methods.
fig.subplots_adjust()
for bottom_label in self.ax.get_xticklabels():                        
    bottom_label.set_fontweight('normal')
ax = fig.add_subplot()

NumPy.
arr.flags['C_CONTIGUOUS']


_validate(), _sanitize()

setattr()

matplotlibrc
axes.prop_cycle : cycler('color', [...
figure.subplot.left : 0.1


print('objects_data', [obj.get_window_extent( renderer = 
   		       self.canvas.get_renderer() ).y0 for obj in
		       self.ax.findobj(match=matplotlib.text.Text)])

bar_width = (dim_dic['bar_coeff'] *
             self._width  *
             fig_width *
      	     self.fig.dpi)




BOOKS & ARTICLES
----------------

The Grammar of Graphics, Leland Wilkinson

Streit, M., Gehlenborg, N. Bar charts and box plots. Nat Methods 11,
117 (2014). https://doi.org/10.1038/nmeth.2807

A Medium article about ecstaticbars. The fallacy of grouped bars and
stacked bars.

Integration with numpy and pandas. Handling the boolean type of colors
resulting from a mask.

Exportation to the svg format, included in an interactive html page 
along with the data.



